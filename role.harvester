var roleHarvester = {

    /** @param {Creep} creep **/
	getNewSource: function(creep){
		var sources = creep.room.find(FIND_SOURCES);
		for( var i=0; i<sources.length; i++) {
			var moveResp = creep.moveTo(sources[i]);
			if(moveResp == -2 || moveResp == -7) {
				continue;
			}
			else {
				creep.memory.harvestingFrom = sources[i].id;
				console.log("Harvesting from : "+JSON.stringify(creep.memory.harvestingFrom));
				break;
			}
		}
		if(!creep.memory.harvestingFrom) {
			creep.suicide();
		}
	},
	
    run: function(creep) {
		var me=this;
		if(!creep.memory.harvestingFrom) {
			me.getNewSource(creep);
		}
		
        if(creep.carry.energy < creep.carryCapacity) {
			console.log("Harvesting from : "+JSON.stringify(creep.memory.harvestingFrom));
            if(creep.harvest(Game.getObjectById(creep.memory.harvestingFrom)) == ERR_NOT_IN_RANGE) {
				var moveResp = creep.moveTo(Game.getObjectById(creep.memory.harvestingFrom))
                if(moveResp == -2 || moveResp == -7) {
					me.getNewSource(creep);
				}
            }
        }
        else {
            var targets = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return (structure.structureType == STRUCTURE_EXTENSION ||
                                structure.structureType == STRUCTURE_SPAWN ||
                                structure.structureType == STRUCTURE_TOWER) && structure.energy < structure.energyCapacity;
                    }
            });
            if(targets.length > 0) {
                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0]);
                }
            }
        }
    }
};

module.exports = roleHarvester;